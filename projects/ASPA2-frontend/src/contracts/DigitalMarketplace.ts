/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DigitalMarketplace","structs":{},"methods":[{"name":"create_app","args":[{"type":"asset","name":"asset"},{"type":"uint64","name":"price"},{"type":"string","name":"seller"},{"type":"string","name":"product"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the marketplace with an agricultural product and price per unit.","events":[],"recommendations":{}},{"name":"update_price","args":[{"type":"uint64","name":"new_price"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allows the owner to update the price of the product.","events":[],"recommendations":{}},{"name":"update_min_quantity","args":[{"type":"uint64","name":"new_min_quantity"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allows the owner to update the minimum order quantity.","events":[],"recommendations":{}},{"name":"setup_marketplace","args":[{"type":"pay","name":"deposit"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets up the marketplace with necessary funding and registers to receive products.","events":[],"recommendations":{}},{"name":"help_buyer_register","args":[{"type":"pay","name":"buyer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Helps a buyer register to receive the product if they haven't already.","events":[],"recommendations":{}},{"name":"purchase","args":[{"type":"pay","name":"payment"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allows users to buy the product by sending the correct payment.","events":[],"recommendations":{}},{"name":"buy_with_registration","args":[{"type":"pay","name":"payment"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allows users to buy the product with automatic registration if needed.","events":[],"recommendations":{}},{"name":"restock_product","args":[{"type":"axfer","name":"asset_txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allows the owner to restock the product.","events":[],"recommendations":{}},{"name":"close_marketplace","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"desc":"Allows the owner to close the marketplace and reclaim assets.","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"asset_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfaWQ="},"price_per_unit":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJpY2VfcGVyX3VuaXQ="},"seller_name":{"keyType":"AVMString","valueType":"AVMString","key":"c2VsbGVyX25hbWU="},"product_name":{"keyType":"AVMString","valueType":"AVMString","key":"cHJvZHVjdF9uYW1l"},"min_order_quantity":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluX29yZGVyX3F1YW50aXR5"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[422],"errorMessage":"Already registered for this product."},{"pc":[807],"errorMessage":"Asset must be sent to marketplace."},{"pc":[812],"errorMessage":"Cannot restock with zero amount."},{"pc":[593,665],"errorMessage":"Contract is not opted into this asset"},{"pc":[430],"errorMessage":"Funds must go to marketplace."},{"pc":[573],"errorMessage":"Incorrect payment amount."},{"pc":[483],"errorMessage":"Insufficient funds for registration."},{"pc":[777],"errorMessage":"Insufficient payment amount."},{"pc":[696],"errorMessage":"Insufficient payment amount. Additional funds needed for product registration."},{"pc":[441],"errorMessage":"Insufficient setup funds."},{"pc":[597,669],"errorMessage":"Not enough product available in stock."},{"pc":[135],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[147,169,195,221,243,265,281,297],"errorMessage":"OnCompletion is not NoOp"},{"pc":[819],"errorMessage":"Only the marketplace owner can close the marketplace."},{"pc":[789],"errorMessage":"Only the marketplace owner can restock."},{"pc":[410],"errorMessage":"Only the marketplace owner can set up."},{"pc":[396],"errorMessage":"Only the marketplace owner can update the minimum quantity."},{"pc":[382],"errorMessage":"Only the marketplace owner can update the price."},{"pc":[560,649],"errorMessage":"Order below minimum quantity."},{"pc":[474,552,641],"errorMessage":"Payment must go to marketplace."},{"pc":[544,633],"errorMessage":"Sender mismatch."},{"pc":[799],"errorMessage":"Wrong asset being transferred."},{"pc":[584],"errorMessage":"You must register to receive this product first. Use help_buyer_register or buy_with_registration."},{"pc":[301],"errorMessage":"can only call when creating"},{"pc":[138,150,172,198,224,246,268,284],"errorMessage":"can only call when not creating"},{"pc":[416,446,488,579,590,602,662,675,701,722,797,824],"errorMessage":"check self.asset_id exists"},{"pc":[556,645],"errorMessage":"check self.min_order_quantity exists"},{"pc":[568,653],"errorMessage":"check self.price_per_unit exists"},{"pc":[160],"errorMessage":"transaction type is axfer"},{"pc":[182,208,234,256],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAEE6AcmAwhhc3NldF9pZA5wcmljZV9wZXJfdW5pdBJtaW5fb3JkZXJfcXVhbnRpdHkxG0EARoIJBDdr2OIEpXgYGATsJxChBMdSvUsEswwm8QTuAuznBGUmJ/YEKbDJ/QRqANPONhoAjgkApgCWAIYAcABaAEAAJgAQAAIiQzEZgQUSRDEYRIgCoCNDMRkURDEYRDEWIwlJOBAkEkSIAmkjQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gBryNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXiAE+I0MxGRREMRhEMRYjCUk4ECMSRIgA4iNDMRkURDEYRDEWIwlJOBAjEkSIAI4jQzEZFEQxGEQ2GgEXiABwI0MxGRREMRhENhoBF4gAUiNDMRkURDEYFEQ2GgEXwDA2GgIXNhoDVwIANhoEVwIAiAACI0OKBAAoi/xnKYv9Z4ALc2VsbGVyX25hbWWL/meADHByb2R1Y3RfbmFtZYv/Z4mKAQAxADIJEkQpi/9niYoBADEAMgkSRCqL/2eJigEAMQAyCRJEMgoiKGVEcABFARREi/84BzIKEkSL/zgIMgEyEAgPRLEiKGVEMgoishKyFLIRJLIQIrIBs4mKAQCL/zgHMgoSRIv/OAhJMhAPRLEiKGVEi/84AElOAyKyErIUshEkshAisgGzMhAJSUEAELGLAbIIiwCyByOyECKyAbOJigIAi/44ADEAEkSL/jgHMgoSRCIqZUSL/w5Ei/44CCIpZUSL/wsSRDEAIihlRHAARQFEMgoiKGVEcABEi/8PRLEiKGVEMQCL/7ISshSyESSyECKyAbOJigIAgACL/jgAMQASRIv+OAcyChJEIiplRIv/DkQiKWVEi/8LMgoiKGVEcABEi/8PRDEAIihlRHAARQFAAFeLATIQCEmMAYv+OAgORLEiKGVEMQAishKyFLIRJLIQIrIBs7EiKGVEMQCL/7ISshSyESSyECKyAbOL/jgIiwEJSYwAQQAQsTEAiwCyCLIHI7IQIrIBs4mL/jgIiwEPREL/wYoBADEAMgkSRIv/OBEiKGVEEkSL/zgUMgoSRIv/OBJEiTEAMgkSRLEiKGVEMglJshUishKyFLIRJLIQJbIBs7EyCUmyCSKyCLIHI7IQJbIBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the DigitalMarketplace contract
 */
export type DigitalMarketplaceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_app(asset,uint64,string,string)void': {
      asset: bigint
      price: bigint | number
      seller: string
      product: string
    }
    'update_price(uint64)void': {
      newPrice: bigint | number
    }
    'update_min_quantity(uint64)void': {
      newMinQuantity: bigint | number
    }
    'setup_marketplace(pay)void': {
      deposit: AppMethodCallTransactionArgument
    }
    'help_buyer_register(pay)void': {
      buyer: AppMethodCallTransactionArgument
    }
    'purchase(pay,uint64)void': {
      payment: AppMethodCallTransactionArgument
      amount: bigint | number
    }
    'buy_with_registration(pay,uint64)void': {
      payment: AppMethodCallTransactionArgument
      amount: bigint | number
    }
    'restock_product(axfer)void': {
      assetTxn: AppMethodCallTransactionArgument
    }
    'close_marketplace()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_app(asset,uint64,string,string)void': [asset: bigint, price: bigint | number, seller: string, product: string]
    'update_price(uint64)void': [newPrice: bigint | number]
    'update_min_quantity(uint64)void': [newMinQuantity: bigint | number]
    'setup_marketplace(pay)void': [deposit: AppMethodCallTransactionArgument]
    'help_buyer_register(pay)void': [buyer: AppMethodCallTransactionArgument]
    'purchase(pay,uint64)void': [payment: AppMethodCallTransactionArgument, amount: bigint | number]
    'buy_with_registration(pay,uint64)void': [payment: AppMethodCallTransactionArgument, amount: bigint | number]
    'restock_product(axfer)void': [assetTxn: AppMethodCallTransactionArgument]
    'close_marketplace()void': []
  }
}

/**
 * The return type for each method
 */
export type DigitalMarketplaceReturns = {
  'create_app(asset,uint64,string,string)void': void
  'update_price(uint64)void': void
  'update_min_quantity(uint64)void': void
  'setup_marketplace(pay)void': void
  'help_buyer_register(pay)void': void
  'purchase(pay,uint64)void': void
  'buy_with_registration(pay,uint64)void': void
  'restock_product(axfer)void': void
  'close_marketplace()void': void
}

/**
 * Defines the types of available calls and state of the DigitalMarketplace smart contract.
 */
export type DigitalMarketplaceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_app(asset,uint64,string,string)void' | 'create_app', {
      argsObj: DigitalMarketplaceArgs['obj']['create_app(asset,uint64,string,string)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['create_app(asset,uint64,string,string)void']
      returns: DigitalMarketplaceReturns['create_app(asset,uint64,string,string)void']
    }>
    & Record<'update_price(uint64)void' | 'update_price', {
      argsObj: DigitalMarketplaceArgs['obj']['update_price(uint64)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['update_price(uint64)void']
      returns: DigitalMarketplaceReturns['update_price(uint64)void']
    }>
    & Record<'update_min_quantity(uint64)void' | 'update_min_quantity', {
      argsObj: DigitalMarketplaceArgs['obj']['update_min_quantity(uint64)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['update_min_quantity(uint64)void']
      returns: DigitalMarketplaceReturns['update_min_quantity(uint64)void']
    }>
    & Record<'setup_marketplace(pay)void' | 'setup_marketplace', {
      argsObj: DigitalMarketplaceArgs['obj']['setup_marketplace(pay)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['setup_marketplace(pay)void']
      returns: DigitalMarketplaceReturns['setup_marketplace(pay)void']
    }>
    & Record<'help_buyer_register(pay)void' | 'help_buyer_register', {
      argsObj: DigitalMarketplaceArgs['obj']['help_buyer_register(pay)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['help_buyer_register(pay)void']
      returns: DigitalMarketplaceReturns['help_buyer_register(pay)void']
    }>
    & Record<'purchase(pay,uint64)void' | 'purchase', {
      argsObj: DigitalMarketplaceArgs['obj']['purchase(pay,uint64)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['purchase(pay,uint64)void']
      returns: DigitalMarketplaceReturns['purchase(pay,uint64)void']
    }>
    & Record<'buy_with_registration(pay,uint64)void' | 'buy_with_registration', {
      argsObj: DigitalMarketplaceArgs['obj']['buy_with_registration(pay,uint64)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['buy_with_registration(pay,uint64)void']
      returns: DigitalMarketplaceReturns['buy_with_registration(pay,uint64)void']
    }>
    & Record<'restock_product(axfer)void' | 'restock_product', {
      argsObj: DigitalMarketplaceArgs['obj']['restock_product(axfer)void']
      argsTuple: DigitalMarketplaceArgs['tuple']['restock_product(axfer)void']
      returns: DigitalMarketplaceReturns['restock_product(axfer)void']
    }>
    & Record<'close_marketplace()void' | 'close_marketplace', {
      argsObj: DigitalMarketplaceArgs['obj']['close_marketplace()void']
      argsTuple: DigitalMarketplaceArgs['tuple']['close_marketplace()void']
      returns: DigitalMarketplaceReturns['close_marketplace()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
        pricePerUnit: bigint
        sellerName: string
        productName: string
        minOrderQuantity: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DigitalMarketplaceSignatures = keyof DigitalMarketplaceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DigitalMarketplaceNonVoidMethodSignatures = keyof DigitalMarketplaceTypes['methods'] extends infer T ? T extends keyof DigitalMarketplaceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DigitalMarketplace smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DigitalMarketplaceSignatures> = DigitalMarketplaceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DigitalMarketplace smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DigitalMarketplaceSignatures> = DigitalMarketplaceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DigitalMarketplaceTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DigitalMarketplaceCreateCallParams =
  | Expand<CallParams<DigitalMarketplaceArgs['obj']['create_app(asset,uint64,string,string)void'] | DigitalMarketplaceArgs['tuple']['create_app(asset,uint64,string,string)void']> & {method: 'create_app'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DigitalMarketplaceArgs['obj']['create_app(asset,uint64,string,string)void'] | DigitalMarketplaceArgs['tuple']['create_app(asset,uint64,string,string)void']> & {method: 'create_app(asset,uint64,string,string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type DigitalMarketplaceDeleteCallParams =
  | Expand<CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']> & {method: 'close_marketplace'}>
  | Expand<CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']> & {method: 'close_marketplace()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DigitalMarketplaceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DigitalMarketplaceCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DigitalMarketplaceDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DigitalMarketplace smart contract
 */
export abstract class DigitalMarketplaceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DigitalMarketplaceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_app':
          case 'create_app(asset,uint64,string,string)void':
            return DigitalMarketplaceParamsFactory.create.createApp(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DigitalMarketplace smart contract using the create_app(asset,uint64,string,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApp(params: CallParams<DigitalMarketplaceArgs['obj']['create_app(asset,uint64,string,string)void'] | DigitalMarketplaceArgs['tuple']['create_app(asset,uint64,string,string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_app(asset,uint64,string,string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.price, params.args.seller, params.args.product],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DigitalMarketplaceDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'close_marketplace':
          case 'close_marketplace()void':
            return DigitalMarketplaceParamsFactory.delete.closeMarketplace(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DigitalMarketplace smart contract using the close_marketplace()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      closeMarketplace(params: CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'close_marketplace()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the update_price(uint64)void ABI method
   *
   * Allows the owner to update the price of the product.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePrice(params: CallParams<DigitalMarketplaceArgs['obj']['update_price(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPrice],
    }
  }
  /**
   * Constructs a no op call for the update_min_quantity(uint64)void ABI method
   *
   * Allows the owner to update the minimum order quantity.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMinQuantity(params: CallParams<DigitalMarketplaceArgs['obj']['update_min_quantity(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_min_quantity(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_min_quantity(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newMinQuantity],
    }
  }
  /**
   * Constructs a no op call for the setup_marketplace(pay)void ABI method
   *
   * Sets up the marketplace with necessary funding and registers to receive products.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setupMarketplace(params: CallParams<DigitalMarketplaceArgs['obj']['setup_marketplace(pay)void'] | DigitalMarketplaceArgs['tuple']['setup_marketplace(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setup_marketplace(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.deposit],
    }
  }
  /**
   * Constructs a no op call for the help_buyer_register(pay)void ABI method
   *
   * Helps a buyer register to receive the product if they haven't already.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static helpBuyerRegister(params: CallParams<DigitalMarketplaceArgs['obj']['help_buyer_register(pay)void'] | DigitalMarketplaceArgs['tuple']['help_buyer_register(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'help_buyer_register(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer],
    }
  }
  /**
   * Constructs a no op call for the purchase(pay,uint64)void ABI method
   *
   * Allows users to buy the product by sending the correct payment.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchase(params: CallParams<DigitalMarketplaceArgs['obj']['purchase(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['purchase(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchase(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the buy_with_registration(pay,uint64)void ABI method
   *
   * Allows users to buy the product with automatic registration if needed.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyWithRegistration(params: CallParams<DigitalMarketplaceArgs['obj']['buy_with_registration(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['buy_with_registration(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_with_registration(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the restock_product(axfer)void ABI method
   *
   * Allows the owner to restock the product.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static restockProduct(params: CallParams<DigitalMarketplaceArgs['obj']['restock_product(axfer)void'] | DigitalMarketplaceArgs['tuple']['restock_product(axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'restock_product(axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTxn],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DigitalMarketplace smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DigitalMarketplaceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DigitalMarketplaceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DigitalMarketplaceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DigitalMarketplaceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DigitalMarketplace smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DigitalMarketplaceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DigitalMarketplaceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DigitalMarketplaceCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DigitalMarketplaceParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DigitalMarketplaceDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DigitalMarketplaceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DigitalMarketplace smart contract using the create_app(asset,uint64,string,string)void ABI method.
       *
       * Initialize the marketplace with an agricultural product and price per unit.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApp: (params: CallParams<DigitalMarketplaceArgs['obj']['create_app(asset,uint64,string,string)void'] | DigitalMarketplaceArgs['tuple']['create_app(asset,uint64,string,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DigitalMarketplaceParamsFactory.create.createApp(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DigitalMarketplace smart contract using the close_marketplace()void ABI method.
       *
       * Allows the owner to close the marketplace and reclaim assets.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      closeMarketplace: (params: CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DigitalMarketplaceParamsFactory.delete.closeMarketplace(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DigitalMarketplace smart contract using the create_app(asset,uint64,string,string)void ABI method.
       *
       * Initialize the marketplace with an agricultural product and price per unit.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApp: (params: CallParams<DigitalMarketplaceArgs['obj']['create_app(asset,uint64,string,string)void'] | DigitalMarketplaceArgs['tuple']['create_app(asset,uint64,string,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DigitalMarketplaceParamsFactory.create.createApp(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DigitalMarketplace smart contract using an ABI method call using the create_app(asset,uint64,string,string)void ABI method.
       *
       * Initialize the marketplace with an agricultural product and price per unit.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApp: async (params: CallParams<DigitalMarketplaceArgs['obj']['create_app(asset,uint64,string,string)void'] | DigitalMarketplaceArgs['tuple']['create_app(asset,uint64,string,string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DigitalMarketplaceParamsFactory.create.createApp(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DigitalMarketplaceReturns['create_app(asset,uint64,string,string)void']) }, appClient: new DigitalMarketplaceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DigitalMarketplace smart contract
 */
export class DigitalMarketplaceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DigitalMarketplaceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DigitalMarketplace app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DigitalMarketplaceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DigitalMarketplaceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DigitalMarketplaceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DigitalMarketplaceClient> {
    return new DigitalMarketplaceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DigitalMarketplaceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DigitalMarketplaceClient> {
    return new DigitalMarketplaceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DigitalMarketplace smart contract using the `close_marketplace()void` ABI method.
       *
       * Allows the owner to close the marketplace and reclaim assets.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      closeMarketplace: (params: CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']> = {args: []}) => {
        return this.appClient.params.delete(DigitalMarketplaceParamsFactory.delete.closeMarketplace(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DigitalMarketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `update_price(uint64)void` ABI method.
     *
     * Allows the owner to update the price of the product.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePrice: (params: CallParams<DigitalMarketplaceArgs['obj']['update_price(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalMarketplaceParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `update_min_quantity(uint64)void` ABI method.
     *
     * Allows the owner to update the minimum order quantity.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMinQuantity: (params: CallParams<DigitalMarketplaceArgs['obj']['update_min_quantity(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_min_quantity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalMarketplaceParamsFactory.updateMinQuantity(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `setup_marketplace(pay)void` ABI method.
     *
     * Sets up the marketplace with necessary funding and registers to receive products.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setupMarketplace: (params: CallParams<DigitalMarketplaceArgs['obj']['setup_marketplace(pay)void'] | DigitalMarketplaceArgs['tuple']['setup_marketplace(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalMarketplaceParamsFactory.setupMarketplace(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `help_buyer_register(pay)void` ABI method.
     *
     * Helps a buyer register to receive the product if they haven't already.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    helpBuyerRegister: (params: CallParams<DigitalMarketplaceArgs['obj']['help_buyer_register(pay)void'] | DigitalMarketplaceArgs['tuple']['help_buyer_register(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalMarketplaceParamsFactory.helpBuyerRegister(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `purchase(pay,uint64)void` ABI method.
     *
     * Allows users to buy the product by sending the correct payment.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchase: (params: CallParams<DigitalMarketplaceArgs['obj']['purchase(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['purchase(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalMarketplaceParamsFactory.purchase(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `buy_with_registration(pay,uint64)void` ABI method.
     *
     * Allows users to buy the product with automatic registration if needed.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyWithRegistration: (params: CallParams<DigitalMarketplaceArgs['obj']['buy_with_registration(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['buy_with_registration(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalMarketplaceParamsFactory.buyWithRegistration(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `restock_product(axfer)void` ABI method.
     *
     * Allows the owner to restock the product.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    restockProduct: (params: CallParams<DigitalMarketplaceArgs['obj']['restock_product(axfer)void'] | DigitalMarketplaceArgs['tuple']['restock_product(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalMarketplaceParamsFactory.restockProduct(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DigitalMarketplace smart contract using the `close_marketplace()void` ABI method.
       *
       * Allows the owner to close the marketplace and reclaim assets.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      closeMarketplace: (params: CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DigitalMarketplaceParamsFactory.delete.closeMarketplace(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DigitalMarketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `update_price(uint64)void` ABI method.
     *
     * Allows the owner to update the price of the product.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePrice: (params: CallParams<DigitalMarketplaceArgs['obj']['update_price(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalMarketplaceParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `update_min_quantity(uint64)void` ABI method.
     *
     * Allows the owner to update the minimum order quantity.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMinQuantity: (params: CallParams<DigitalMarketplaceArgs['obj']['update_min_quantity(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_min_quantity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalMarketplaceParamsFactory.updateMinQuantity(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `setup_marketplace(pay)void` ABI method.
     *
     * Sets up the marketplace with necessary funding and registers to receive products.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setupMarketplace: (params: CallParams<DigitalMarketplaceArgs['obj']['setup_marketplace(pay)void'] | DigitalMarketplaceArgs['tuple']['setup_marketplace(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalMarketplaceParamsFactory.setupMarketplace(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `help_buyer_register(pay)void` ABI method.
     *
     * Helps a buyer register to receive the product if they haven't already.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    helpBuyerRegister: (params: CallParams<DigitalMarketplaceArgs['obj']['help_buyer_register(pay)void'] | DigitalMarketplaceArgs['tuple']['help_buyer_register(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalMarketplaceParamsFactory.helpBuyerRegister(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `purchase(pay,uint64)void` ABI method.
     *
     * Allows users to buy the product by sending the correct payment.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchase: (params: CallParams<DigitalMarketplaceArgs['obj']['purchase(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['purchase(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalMarketplaceParamsFactory.purchase(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `buy_with_registration(pay,uint64)void` ABI method.
     *
     * Allows users to buy the product with automatic registration if needed.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyWithRegistration: (params: CallParams<DigitalMarketplaceArgs['obj']['buy_with_registration(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['buy_with_registration(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalMarketplaceParamsFactory.buyWithRegistration(params))
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `restock_product(axfer)void` ABI method.
     *
     * Allows the owner to restock the product.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    restockProduct: (params: CallParams<DigitalMarketplaceArgs['obj']['restock_product(axfer)void'] | DigitalMarketplaceArgs['tuple']['restock_product(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalMarketplaceParamsFactory.restockProduct(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DigitalMarketplace smart contract using the `close_marketplace()void` ABI method.
       *
       * Allows the owner to close the marketplace and reclaim assets.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      closeMarketplace: async (params: CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DigitalMarketplaceParamsFactory.delete.closeMarketplace(params))
        return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['close_marketplace()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DigitalMarketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `update_price(uint64)void` ABI method.
     *
     * Allows the owner to update the price of the product.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePrice: async (params: CallParams<DigitalMarketplaceArgs['obj']['update_price(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalMarketplaceParamsFactory.updatePrice(params))
      return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['update_price(uint64)void'])}
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `update_min_quantity(uint64)void` ABI method.
     *
     * Allows the owner to update the minimum order quantity.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMinQuantity: async (params: CallParams<DigitalMarketplaceArgs['obj']['update_min_quantity(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_min_quantity(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalMarketplaceParamsFactory.updateMinQuantity(params))
      return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['update_min_quantity(uint64)void'])}
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `setup_marketplace(pay)void` ABI method.
     *
     * Sets up the marketplace with necessary funding and registers to receive products.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setupMarketplace: async (params: CallParams<DigitalMarketplaceArgs['obj']['setup_marketplace(pay)void'] | DigitalMarketplaceArgs['tuple']['setup_marketplace(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalMarketplaceParamsFactory.setupMarketplace(params))
      return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['setup_marketplace(pay)void'])}
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `help_buyer_register(pay)void` ABI method.
     *
     * Helps a buyer register to receive the product if they haven't already.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    helpBuyerRegister: async (params: CallParams<DigitalMarketplaceArgs['obj']['help_buyer_register(pay)void'] | DigitalMarketplaceArgs['tuple']['help_buyer_register(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalMarketplaceParamsFactory.helpBuyerRegister(params))
      return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['help_buyer_register(pay)void'])}
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `purchase(pay,uint64)void` ABI method.
     *
     * Allows users to buy the product by sending the correct payment.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchase: async (params: CallParams<DigitalMarketplaceArgs['obj']['purchase(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['purchase(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalMarketplaceParamsFactory.purchase(params))
      return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['purchase(pay,uint64)void'])}
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `buy_with_registration(pay,uint64)void` ABI method.
     *
     * Allows users to buy the product with automatic registration if needed.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyWithRegistration: async (params: CallParams<DigitalMarketplaceArgs['obj']['buy_with_registration(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['buy_with_registration(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalMarketplaceParamsFactory.buyWithRegistration(params))
      return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['buy_with_registration(pay,uint64)void'])}
    },

    /**
     * Makes a call to the DigitalMarketplace smart contract using the `restock_product(axfer)void` ABI method.
     *
     * Allows the owner to restock the product.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    restockProduct: async (params: CallParams<DigitalMarketplaceArgs['obj']['restock_product(axfer)void'] | DigitalMarketplaceArgs['tuple']['restock_product(axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalMarketplaceParamsFactory.restockProduct(params))
      return {...result, return: result.return as unknown as (undefined | DigitalMarketplaceReturns['restock_product(axfer)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DigitalMarketplaceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DigitalMarketplace app
   */
  state = {
    /**
     * Methods to access global state for the current DigitalMarketplace app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.asset_id,
          pricePerUnit: result.price_per_unit,
          sellerName: result.seller_name,
          productName: result.product_name,
          minOrderQuantity: result.min_order_quantity,
        }
      },
      /**
       * Get the current value of the asset_id key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_id")) as bigint | undefined },
      /**
       * Get the current value of the price_per_unit key in global state
       */
      pricePerUnit: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("price_per_unit")) as bigint | undefined },
      /**
       * Get the current value of the seller_name key in global state
       */
      sellerName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("seller_name")) as string | undefined },
      /**
       * Get the current value of the product_name key in global state
       */
      productName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("product_name")) as string | undefined },
      /**
       * Get the current value of the min_order_quantity key in global state
       */
      minOrderQuantity: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("min_order_quantity")) as bigint | undefined },
    },
  }

  public newGroup(): DigitalMarketplaceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a update_price(uint64)void method call against the DigitalMarketplace contract
       */
      updatePrice(params: CallParams<DigitalMarketplaceArgs['obj']['update_price(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_min_quantity(uint64)void method call against the DigitalMarketplace contract
       */
      updateMinQuantity(params: CallParams<DigitalMarketplaceArgs['obj']['update_min_quantity(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_min_quantity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMinQuantity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setup_marketplace(pay)void method call against the DigitalMarketplace contract
       */
      setupMarketplace(params: CallParams<DigitalMarketplaceArgs['obj']['setup_marketplace(pay)void'] | DigitalMarketplaceArgs['tuple']['setup_marketplace(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setupMarketplace(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a help_buyer_register(pay)void method call against the DigitalMarketplace contract
       */
      helpBuyerRegister(params: CallParams<DigitalMarketplaceArgs['obj']['help_buyer_register(pay)void'] | DigitalMarketplaceArgs['tuple']['help_buyer_register(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.helpBuyerRegister(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a purchase(pay,uint64)void method call against the DigitalMarketplace contract
       */
      purchase(params: CallParams<DigitalMarketplaceArgs['obj']['purchase(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['purchase(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchase(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buy_with_registration(pay,uint64)void method call against the DigitalMarketplace contract
       */
      buyWithRegistration(params: CallParams<DigitalMarketplaceArgs['obj']['buy_with_registration(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['buy_with_registration(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyWithRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a restock_product(axfer)void method call against the DigitalMarketplace contract
       */
      restockProduct(params: CallParams<DigitalMarketplaceArgs['obj']['restock_product(axfer)void'] | DigitalMarketplaceArgs['tuple']['restock_product(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.restockProduct(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          closeMarketplace: (params: CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.closeMarketplace(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DigitalMarketplace contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DigitalMarketplaceComposer
  }
}
export type DigitalMarketplaceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the update_price(uint64)void ABI method.
   *
   * Allows the owner to update the price of the product.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePrice(params?: CallParams<DigitalMarketplaceArgs['obj']['update_price(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_price(uint64)void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['update_price(uint64)void'] | undefined]>

  /**
   * Calls the update_min_quantity(uint64)void ABI method.
   *
   * Allows the owner to update the minimum order quantity.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMinQuantity(params?: CallParams<DigitalMarketplaceArgs['obj']['update_min_quantity(uint64)void'] | DigitalMarketplaceArgs['tuple']['update_min_quantity(uint64)void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['update_min_quantity(uint64)void'] | undefined]>

  /**
   * Calls the setup_marketplace(pay)void ABI method.
   *
   * Sets up the marketplace with necessary funding and registers to receive products.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setupMarketplace(params?: CallParams<DigitalMarketplaceArgs['obj']['setup_marketplace(pay)void'] | DigitalMarketplaceArgs['tuple']['setup_marketplace(pay)void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['setup_marketplace(pay)void'] | undefined]>

  /**
   * Calls the help_buyer_register(pay)void ABI method.
   *
   * Helps a buyer register to receive the product if they haven't already.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  helpBuyerRegister(params?: CallParams<DigitalMarketplaceArgs['obj']['help_buyer_register(pay)void'] | DigitalMarketplaceArgs['tuple']['help_buyer_register(pay)void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['help_buyer_register(pay)void'] | undefined]>

  /**
   * Calls the purchase(pay,uint64)void ABI method.
   *
   * Allows users to buy the product by sending the correct payment.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchase(params?: CallParams<DigitalMarketplaceArgs['obj']['purchase(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['purchase(pay,uint64)void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['purchase(pay,uint64)void'] | undefined]>

  /**
   * Calls the buy_with_registration(pay,uint64)void ABI method.
   *
   * Allows users to buy the product with automatic registration if needed.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyWithRegistration(params?: CallParams<DigitalMarketplaceArgs['obj']['buy_with_registration(pay,uint64)void'] | DigitalMarketplaceArgs['tuple']['buy_with_registration(pay,uint64)void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['buy_with_registration(pay,uint64)void'] | undefined]>

  /**
   * Calls the restock_product(axfer)void ABI method.
   *
   * Allows the owner to restock the product.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  restockProduct(params?: CallParams<DigitalMarketplaceArgs['obj']['restock_product(axfer)void'] | DigitalMarketplaceArgs['tuple']['restock_product(axfer)void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['restock_product(axfer)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DigitalMarketplace smart contract using the close_marketplace()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    closeMarketplace(params?: CallParams<DigitalMarketplaceArgs['obj']['close_marketplace()void'] | DigitalMarketplaceArgs['tuple']['close_marketplace()void']>): DigitalMarketplaceComposer<[...TReturns, DigitalMarketplaceReturns['close_marketplace()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DigitalMarketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DigitalMarketplaceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DigitalMarketplaceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DigitalMarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DigitalMarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DigitalMarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DigitalMarketplaceComposerResults<TReturns>>
}
export type DigitalMarketplaceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

