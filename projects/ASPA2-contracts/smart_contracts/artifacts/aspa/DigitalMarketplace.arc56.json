{
    "name": "DigitalMarketplace",
    "structs": {},
    "methods": [
        {
            "name": "create_app",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "price"
                },
                {
                    "type": "string",
                    "name": "seller"
                },
                {
                    "type": "string",
                    "name": "product"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the marketplace with an agricultural product and price per unit.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_price",
            "args": [
                {
                    "type": "uint64",
                    "name": "new_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Allows the owner to update the price of the product.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_min_quantity",
            "args": [
                {
                    "type": "uint64",
                    "name": "new_min_quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Allows the owner to update the minimum order quantity.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setup_marketplace",
            "args": [
                {
                    "type": "pay",
                    "name": "deposit"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets up the marketplace with necessary funding and registers to receive products.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "help_buyer_register",
            "args": [
                {
                    "type": "pay",
                    "name": "buyer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helps a buyer register to receive the product if they haven't already.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Allows users to buy the product by sending the correct payment.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy_with_registration",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Allows users to buy the product with automatic registration if needed.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "restock_product",
            "args": [
                {
                    "type": "axfer",
                    "name": "asset_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Allows the owner to restock the product.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_marketplace",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "desc": "Allows the owner to close the marketplace and reclaim assets.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "price_per_unit": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJpY2VfcGVyX3VuaXQ="
                },
                "seller_name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c2VsbGVyX25hbWU="
                },
                "product_name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "cHJvZHVjdF9uYW1l"
                },
                "min_order_quantity": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluX29yZGVyX3F1YW50aXR5"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        422
                    ],
                    "errorMessage": "Already registered for this product."
                },
                {
                    "pc": [
                        807
                    ],
                    "errorMessage": "Asset must be sent to marketplace."
                },
                {
                    "pc": [
                        812
                    ],
                    "errorMessage": "Cannot restock with zero amount."
                },
                {
                    "pc": [
                        593,
                        665
                    ],
                    "errorMessage": "Contract is not opted into this asset"
                },
                {
                    "pc": [
                        430
                    ],
                    "errorMessage": "Funds must go to marketplace."
                },
                {
                    "pc": [
                        573
                    ],
                    "errorMessage": "Incorrect payment amount."
                },
                {
                    "pc": [
                        483
                    ],
                    "errorMessage": "Insufficient funds for registration."
                },
                {
                    "pc": [
                        777
                    ],
                    "errorMessage": "Insufficient payment amount."
                },
                {
                    "pc": [
                        696
                    ],
                    "errorMessage": "Insufficient payment amount. Additional funds needed for product registration."
                },
                {
                    "pc": [
                        441
                    ],
                    "errorMessage": "Insufficient setup funds."
                },
                {
                    "pc": [
                        597,
                        669
                    ],
                    "errorMessage": "Not enough product available in stock."
                },
                {
                    "pc": [
                        135
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        147,
                        169,
                        195,
                        221,
                        243,
                        265,
                        281,
                        297
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        819
                    ],
                    "errorMessage": "Only the marketplace owner can close the marketplace."
                },
                {
                    "pc": [
                        789
                    ],
                    "errorMessage": "Only the marketplace owner can restock."
                },
                {
                    "pc": [
                        410
                    ],
                    "errorMessage": "Only the marketplace owner can set up."
                },
                {
                    "pc": [
                        396
                    ],
                    "errorMessage": "Only the marketplace owner can update the minimum quantity."
                },
                {
                    "pc": [
                        382
                    ],
                    "errorMessage": "Only the marketplace owner can update the price."
                },
                {
                    "pc": [
                        560,
                        649
                    ],
                    "errorMessage": "Order below minimum quantity."
                },
                {
                    "pc": [
                        474,
                        552,
                        641
                    ],
                    "errorMessage": "Payment must go to marketplace."
                },
                {
                    "pc": [
                        544,
                        633
                    ],
                    "errorMessage": "Sender mismatch."
                },
                {
                    "pc": [
                        799
                    ],
                    "errorMessage": "Wrong asset being transferred."
                },
                {
                    "pc": [
                        584
                    ],
                    "errorMessage": "You must register to receive this product first. Use help_buyer_register or buy_with_registration."
                },
                {
                    "pc": [
                        301
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        138,
                        150,
                        172,
                        198,
                        224,
                        246,
                        268,
                        284
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        416,
                        446,
                        488,
                        579,
                        590,
                        602,
                        662,
                        675,
                        701,
                        722,
                        797,
                        824
                    ],
                    "errorMessage": "check self.asset_id exists"
                },
                {
                    "pc": [
                        556,
                        645
                    ],
                    "errorMessage": "check self.min_order_quantity exists"
                },
                {
                    "pc": [
                        568,
                        653
                    ],
                    "errorMessage": "check self.price_per_unit exists"
                },
                {
                    "pc": [
                        160
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        182,
                        208,
                        234,
                        256
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEE6AcmAwhhc3NldF9pZA5wcmljZV9wZXJfdW5pdBJtaW5fb3JkZXJfcXVhbnRpdHkxG0EARoIJBDdr2OIEpXgYGATsJxChBMdSvUsEswwm8QTuAuznBGUmJ/YEKbDJ/QRqANPONhoAjgkApgCWAIYAcABaAEAAJgAQAAIiQzEZgQUSRDEYRIgCoCNDMRkURDEYRDEWIwlJOBAkEkSIAmkjQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gBryNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXiAE+I0MxGRREMRhEMRYjCUk4ECMSRIgA4iNDMRkURDEYRDEWIwlJOBAjEkSIAI4jQzEZFEQxGEQ2GgEXiABwI0MxGRREMRhENhoBF4gAUiNDMRkURDEYFEQ2GgEXwDA2GgIXNhoDVwIANhoEVwIAiAACI0OKBAAoi/xnKYv9Z4ALc2VsbGVyX25hbWWL/meADHByb2R1Y3RfbmFtZYv/Z4mKAQAxADIJEkQpi/9niYoBADEAMgkSRCqL/2eJigEAMQAyCRJEMgoiKGVEcABFARREi/84BzIKEkSL/zgIMgEyEAgPRLEiKGVEMgoishKyFLIRJLIQIrIBs4mKAQCL/zgHMgoSRIv/OAhJMhAPRLEiKGVEi/84AElOAyKyErIUshEkshAisgGzMhAJSUEAELGLAbIIiwCyByOyECKyAbOJigIAi/44ADEAEkSL/jgHMgoSRCIqZUSL/w5Ei/44CCIpZUSL/wsSRDEAIihlRHAARQFEMgoiKGVEcABEi/8PRLEiKGVEMQCL/7ISshSyESSyECKyAbOJigIAgACL/jgAMQASRIv+OAcyChJEIiplRIv/DkQiKWVEi/8LMgoiKGVEcABEi/8PRDEAIihlRHAARQFAAFeLATIQCEmMAYv+OAgORLEiKGVEMQAishKyFLIRJLIQIrIBs7EiKGVEMQCL/7ISshSyESSyECKyAbOL/jgIiwEJSYwAQQAQsTEAiwCyCLIHI7IQIrIBs4mL/jgIiwEPREL/wYoBADEAMgkSRIv/OBEiKGVEEkSL/zgUMgoSRIv/OBJEiTEAMgkSRLEiKGVEMglJshUishKyFLIRJLIQJbIBs7EyCUmyCSKyCLIHI7IQJbIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}