{
  "version": 3,
  "sources": [
    "../../aspa/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AA4LK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA9KL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8KK;;;AAAA;;AAtDA;;AAAA;AAAA;AAAA;;AAAA;AAxHL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAwHK;;;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AArFL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAqFK;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4DK;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqCK;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA7BL;;;AAAA;AA6BK;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;AAqBK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAPL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAOK;;;AAAA;;AAAL;;;AASQ;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;;AAER;;;AAIY;;AAAc;;AAAd;AADJ;AAGA;AAAA;;AAAA;;AAER;;;AAIY;;AAAc;;AAAd;AADJ;AAGA;AAAA;;AAAA;;AAER;;;AAIY;;AAAc;;AAAd;AADJ;AAGW;;AACD;AAAA;AAAA;AAAA;AADC;;AAAA;;AAAJ;AAAP;AAII;;AAAA;;AAAoB;;AAApB;AADJ;AAII;;AAAA;;AAAkB;;AAAqB;;AAArB;AAAlB;AADJ;AAKA;AACe;AAAA;AAAA;AAAA;AACI;;AACF;;;;;;;AAHjB;;;AAAA;;;AAAA;;AAMR;;;AAIY;;AAAA;;AAAkB;;AAAlB;AADJ;AAII;;AAAA;;AAAA;AAAgB;;AAAhB;AADJ;AAKA;AACe;AAAA;AAAA;AAAA;AACI;;AAAA;;AAAA;AAAA;;AACF;;;;;;;AAHjB;;;AAAA;;;AAAA;AAO2B;;AAAf;AAAZ;AACR;;;AACY;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAKZ;;;AAGe;;AAAA;;AAAkB;;AAAlB;AAAP;AAEI;;AAAA;;AAAoB;;AAApB;AADJ;AAGiB;AAAA;AAAA;AAAA;AAAV;;AAAA;AAAP;AAEI;;AAAA;;AAAkB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAlB;AADJ;AAKO;;AAA6B;AAAA;AAAA;AAAA;AAA7B;;AAAA;;AAAJ;AAQC;;AAA0C;AAAA;AAAA;AAAA;AADnB;;AAI3B;AAEO;;AAAA;AAAP;AAGA;AACe;AAAA;AAAA;AAAA;AACI;;;;;;;;;;AAFnB;;;AAAA;;;AAAA;;AAMR;;;;;AAKe;;AAAA;;AAAkB;;AAAlB;AAAP;AAEI;;AAAA;;AAAoB;;AAApB;AADJ;AAGiB;AAAA;AAAA;AAAA;AAAV;;AAAA;AAAP;AAGkB;AAAA;AAAA;AAAA;AAAlB;;AAAkB;AAId;;AAA0C;AAAA;AAAA;AAAA;AADnB;;AAG3B;AAEO;;AAAA;AAAP;AAGO;;AAA6B;AAAA;AAAA;AAAA;AAA7B;;AAAA;;AAAJ;;;AACC;;AAAmB;;AAAnB;AAAA;AAAA;;AAGI;;AAAA;;AAAA;AADJ;AAKA;AACe;AAAA;AAAA;AAAA;AACI;;AACF;;;;;;;AAHjB;;;AAAA;;;AAAA;AASJ;AACe;AAAA;AAAA;AAAA;AACI;;;;;;;;;;AAFnB;;;AAAA;;;AAAA;AAOS;;AAAA;;AAAT;;AAAS;AAAT;AAAA;;AACR;;;AACY;AACa;;;;;;;;AADb;;;AAAA;;;AAAA;;AAZO;;AAAA;;AAAA;;AAAA;AAAP;;;;AAiBZ;;;AAIY;;AAAc;;AAAd;AADJ;AAII;;AAAA;;AAA2B;AAAA;AAAA;AAAA;AAA3B;AADJ;AAII;;AAAA;;AAA4B;;AAA5B;AADJ;AAGO;;AAAA;;AAAP;;AAMI;;AAAc;;AAAd;AADJ;AAIA;AACe;AAAA;AAAA;AAAA;AACI;;AAEA;;;AADF;;;;;;;AAHjB;;;AAKQ;;;AALR;AAQA;AACa;;AAEU;;;AADZ;;;;;AAFX;;;AAIQ;;;AAJR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 1000"
    },
    "8": {
      "op": "bytecblock \"asset_id\" \"price_per_unit\" \"min_order_quantity\""
    },
    "53": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "55": {
      "op": "bz main_after_if_else@15",
      "stack_out": []
    },
    "58": {
      "op": "pushbytess 0x376bd8e2 0xa5781818 0xec2710a1 0xc752bd4b 0xb30c26f1 0xee02ece7 0x652627f6 0x29b0c9fd 0x6a00d3ce // method \"create_app(asset,uint64,string,string)void\", method \"update_price(uint64)void\", method \"update_min_quantity(uint64)void\", method \"setup_marketplace(pay)void\", method \"help_buyer_register(pay)void\", method \"purchase(pay,uint64)void\", method \"buy_with_registration(pay,uint64)void\", method \"restock_product(axfer)void\", method \"close_marketplace()void\"",
      "defined_out": [
        "Method(buy_with_registration(pay,uint64)void)",
        "Method(close_marketplace()void)",
        "Method(create_app(asset,uint64,string,string)void)",
        "Method(help_buyer_register(pay)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(restock_product(axfer)void)",
        "Method(setup_marketplace(pay)void)",
        "Method(update_min_quantity(uint64)void)",
        "Method(update_price(uint64)void)"
      ],
      "stack_out": [
        "Method(create_app(asset,uint64,string,string)void)",
        "Method(update_price(uint64)void)",
        "Method(update_min_quantity(uint64)void)",
        "Method(setup_marketplace(pay)void)",
        "Method(help_buyer_register(pay)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(buy_with_registration(pay,uint64)void)",
        "Method(restock_product(axfer)void)",
        "Method(close_marketplace()void)"
      ]
    },
    "105": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(buy_with_registration(pay,uint64)void)",
        "Method(close_marketplace()void)",
        "Method(create_app(asset,uint64,string,string)void)",
        "Method(help_buyer_register(pay)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(restock_product(axfer)void)",
        "Method(setup_marketplace(pay)void)",
        "Method(update_min_quantity(uint64)void)",
        "Method(update_price(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_app(asset,uint64,string,string)void)",
        "Method(update_price(uint64)void)",
        "Method(update_min_quantity(uint64)void)",
        "Method(setup_marketplace(pay)void)",
        "Method(help_buyer_register(pay)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(buy_with_registration(pay,uint64)void)",
        "Method(restock_product(axfer)void)",
        "Method(close_marketplace()void)",
        "tmp%2#0"
      ]
    },
    "108": {
      "op": "match main_create_app_route@3 main_update_price_route@4 main_update_min_quantity_route@5 main_setup_marketplace_route@6 main_help_buyer_register_route@7 main_purchase_route@8 main_buy_with_registration_route@9 main_restock_product_route@10 main_close_marketplace_route@11",
      "stack_out": []
    },
    "128": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    },
    "130": {
      "block": "main_close_marketplace_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "132": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "DeleteApplication"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "135": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "136": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "138": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "139": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.close_marketplace",
      "op": "callsub close_marketplace"
    },
    "142": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "block": "main_restock_product_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "153": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "1"
      ]
    },
    "154": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "155": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "156": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "158": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "axfer"
      ]
    },
    "159": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "160": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "161": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.restock_product",
      "op": "callsub restock_product",
      "stack_out": []
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "block": "main_buy_with_registration_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "175": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "1"
      ]
    },
    "176": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "177": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "178": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "180": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "182": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "183": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "186": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%45#0"
      ]
    },
    "187": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.buy_with_registration",
      "op": "callsub buy_with_registration",
      "stack_out": []
    },
    "190": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "return",
      "stack_out": []
    },
    "192": {
      "block": "main_purchase_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "194": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "198": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "199": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "201": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "1"
      ]
    },
    "202": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "203": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "204": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "206": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "207": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "208": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "209": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "212": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%39#0"
      ]
    },
    "213": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.purchase",
      "op": "callsub purchase",
      "stack_out": []
    },
    "216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "return",
      "stack_out": []
    },
    "218": {
      "block": "main_help_buyer_register_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "220": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "221": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "222": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "224": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "225": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "227": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "1"
      ]
    },
    "228": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "229": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "230": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "232": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "233": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "234": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "235": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.help_buyer_register",
      "op": "callsub help_buyer_register",
      "stack_out": []
    },
    "238": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "return",
      "stack_out": []
    },
    "240": {
      "block": "main_setup_marketplace_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "242": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "243": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "244": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "246": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "247": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "249": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "1"
      ]
    },
    "250": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "251": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "252": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "254": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "255": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "256": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "257": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.setup_marketplace",
      "op": "callsub setup_marketplace",
      "stack_out": []
    },
    "260": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "return",
      "stack_out": []
    },
    "262": {
      "block": "main_update_min_quantity_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "264": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "265": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "266": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "268": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "269": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "272": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "273": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.update_min_quantity",
      "op": "callsub update_min_quantity",
      "stack_out": []
    },
    "276": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "277": {
      "op": "return",
      "stack_out": []
    },
    "278": {
      "block": "main_update_price_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "280": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "281": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "282": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "284": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "285": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "288": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "289": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.update_price",
      "op": "callsub update_price",
      "stack_out": []
    },
    "292": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "return",
      "stack_out": []
    },
    "294": {
      "block": "main_create_app_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "296": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "297": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "298": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "300": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "301": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "302": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "305": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "306": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "311": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "312": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "315": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "318": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "321": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "324": {
      "callsub": "smart_contracts.aspa.contract.DigitalMarketplace.create_app",
      "op": "callsub create_app",
      "stack_out": []
    },
    "327": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "328": {
      "op": "return",
      "stack_out": []
    },
    "329": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.create_app",
      "params": {
        "asset#0": "uint64",
        "price#0": "uint64",
        "seller#0": "bytes",
        "product#0": "bytes"
      },
      "block": "create_app",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "332": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "333": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"asset_id\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset_id\"",
        "asset#0 (copy)"
      ]
    },
    "335": {
      "op": "app_global_put",
      "stack_out": []
    },
    "336": {
      "op": "bytec_1 // \"price_per_unit\"",
      "defined_out": [
        "\"price_per_unit\""
      ],
      "stack_out": [
        "\"price_per_unit\""
      ]
    },
    "337": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"price_per_unit\"",
        "price#0 (copy)"
      ],
      "stack_out": [
        "\"price_per_unit\"",
        "price#0 (copy)"
      ]
    },
    "339": {
      "op": "app_global_put",
      "stack_out": []
    },
    "340": {
      "op": "pushbytes \"seller_name\"",
      "defined_out": [
        "\"seller_name\""
      ],
      "stack_out": [
        "\"seller_name\""
      ]
    },
    "353": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"seller_name\"",
        "seller#0 (copy)"
      ],
      "stack_out": [
        "\"seller_name\"",
        "seller#0 (copy)"
      ]
    },
    "355": {
      "op": "app_global_put",
      "stack_out": []
    },
    "356": {
      "op": "pushbytes \"product_name\"",
      "defined_out": [
        "\"product_name\""
      ],
      "stack_out": [
        "\"product_name\""
      ]
    },
    "370": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"product_name\"",
        "product#0 (copy)"
      ],
      "stack_out": [
        "\"product_name\"",
        "product#0 (copy)"
      ]
    },
    "372": {
      "op": "app_global_put",
      "stack_out": []
    },
    "373": {
      "retsub": true,
      "op": "retsub"
    },
    "374": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.update_price",
      "params": {
        "new_price#0": "uint64"
      },
      "block": "update_price",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "377": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "381": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "382": {
      "error": "Only the marketplace owner can update the price.",
      "op": "assert // Only the marketplace owner can update the price.",
      "stack_out": []
    },
    "383": {
      "op": "bytec_1 // \"price_per_unit\"",
      "defined_out": [
        "\"price_per_unit\""
      ],
      "stack_out": [
        "\"price_per_unit\""
      ]
    },
    "384": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"price_per_unit\"",
        "new_price#0 (copy)"
      ],
      "stack_out": [
        "\"price_per_unit\"",
        "new_price#0 (copy)"
      ]
    },
    "386": {
      "op": "app_global_put",
      "stack_out": []
    },
    "387": {
      "retsub": true,
      "op": "retsub"
    },
    "388": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.update_min_quantity",
      "params": {
        "new_min_quantity#0": "uint64"
      },
      "block": "update_min_quantity",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "391": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "393": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "395": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "396": {
      "error": "Only the marketplace owner can update the minimum quantity.",
      "op": "assert // Only the marketplace owner can update the minimum quantity.",
      "stack_out": []
    },
    "397": {
      "op": "bytec_2 // \"min_order_quantity\"",
      "defined_out": [
        "\"min_order_quantity\""
      ],
      "stack_out": [
        "\"min_order_quantity\""
      ]
    },
    "398": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"min_order_quantity\"",
        "new_min_quantity#0 (copy)"
      ],
      "stack_out": [
        "\"min_order_quantity\"",
        "new_min_quantity#0 (copy)"
      ]
    },
    "400": {
      "op": "app_global_put",
      "stack_out": []
    },
    "401": {
      "retsub": true,
      "op": "retsub"
    },
    "402": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.setup_marketplace",
      "params": {
        "deposit#0": "uint64"
      },
      "block": "setup_marketplace",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "405": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "407": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "409": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "410": {
      "error": "Only the marketplace owner can set up.",
      "op": "assert // Only the marketplace owner can set up.",
      "stack_out": []
    },
    "411": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "413": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "414": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"asset_id\""
      ]
    },
    "415": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "416": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "417": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "419": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "421": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "422": {
      "error": "Already registered for this product.",
      "op": "assert // Already registered for this product.",
      "stack_out": []
    },
    "423": {
      "op": "frame_dig -1",
      "defined_out": [
        "deposit#0 (copy)"
      ],
      "stack_out": [
        "deposit#0 (copy)"
      ]
    },
    "425": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "427": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "429": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "430": {
      "error": "Funds must go to marketplace.",
      "op": "assert // Funds must go to marketplace.",
      "stack_out": []
    },
    "431": {
      "op": "frame_dig -1",
      "stack_out": [
        "deposit#0 (copy)"
      ]
    },
    "433": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "435": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "437": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "439": {
      "op": "+",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "440": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "441": {
      "error": "Insufficient setup funds.",
      "op": "assert // Insufficient setup funds.",
      "stack_out": []
    },
    "442": {
      "op": "itxn_begin"
    },
    "443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "444": {
      "op": "bytec_0 // \"asset_id\"",
      "stack_out": [
        "0",
        "\"asset_id\""
      ]
    },
    "445": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "446": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "447": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "449": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "450": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "452": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "454": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "456": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "457": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "459": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "460": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "462": {
      "op": "itxn_submit"
    },
    "463": {
      "retsub": true,
      "op": "retsub"
    },
    "464": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.help_buyer_register",
      "params": {
        "buyer#0": "uint64"
      },
      "block": "help_buyer_register",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "467": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyer#0 (copy)"
      ],
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "469": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "471": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "473": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "474": {
      "error": "Payment must go to marketplace.",
      "op": "assert // Payment must go to marketplace.",
      "stack_out": []
    },
    "475": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "477": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "479": {
      "op": "dup"
    },
    "480": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ]
    },
    "482": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "483": {
      "error": "Insufficient funds for registration.",
      "op": "assert // Insufficient funds for registration.",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "484": {
      "op": "itxn_begin"
    },
    "485": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "486": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"asset_id\""
      ]
    },
    "487": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "488": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "489": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "buyer#0 (copy)"
      ]
    },
    "491": {
      "op": "gtxns Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "493": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "494": {
      "op": "cover 3",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "496": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "497": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "499": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "501": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0"
      ]
    },
    "503": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "axfer"
      ]
    },
    "504": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0"
      ]
    },
    "506": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "0"
      ]
    },
    "507": {
      "op": "itxn_field Fee",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0"
      ]
    },
    "509": {
      "op": "itxn_submit"
    },
    "510": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "512": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ]
    },
    "513": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0",
        "remaining#0"
      ]
    },
    "514": {
      "op": "bz help_buyer_register_after_if_else@4",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ]
    },
    "517": {
      "op": "itxn_begin"
    },
    "518": {
      "op": "frame_dig 1",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0",
        "remaining#0"
      ]
    },
    "520": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ]
    },
    "522": {
      "op": "frame_dig 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "524": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ]
    },
    "526": {
      "op": "intc_1 // pay",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "pay",
        "remaining#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0",
        "pay"
      ]
    },
    "527": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ]
    },
    "529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0",
        "0"
      ]
    },
    "530": {
      "op": "itxn_field Fee",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ]
    },
    "532": {
      "op": "itxn_submit"
    },
    "533": {
      "block": "help_buyer_register_after_if_else@4",
      "stack_in": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "remaining#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "534": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.purchase",
      "params": {
        "payment#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "purchase",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "537": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "539": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "541": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "543": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "544": {
      "error": "Sender mismatch.",
      "op": "assert // Sender mismatch.",
      "stack_out": []
    },
    "545": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "547": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "549": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "552": {
      "error": "Payment must go to marketplace.",
      "op": "assert // Payment must go to marketplace.",
      "stack_out": []
    },
    "553": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "554": {
      "op": "bytec_2 // \"min_order_quantity\"",
      "defined_out": [
        "\"min_order_quantity\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"min_order_quantity\""
      ]
    },
    "555": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "556": {
      "error": "check self.min_order_quantity exists",
      "op": "assert // check self.min_order_quantity exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "557": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "559": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "560": {
      "error": "Order below minimum quantity.",
      "op": "assert // Order below minimum quantity.",
      "stack_out": []
    },
    "561": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "563": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "565": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "566": {
      "op": "bytec_1 // \"price_per_unit\"",
      "defined_out": [
        "\"price_per_unit\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"price_per_unit\""
      ]
    },
    "567": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "568": {
      "error": "check self.price_per_unit exists",
      "op": "assert // check self.price_per_unit exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "569": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "571": {
      "op": "*",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "572": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "573": {
      "error": "Incorrect payment amount.",
      "op": "assert // Incorrect payment amount.",
      "stack_out": []
    },
    "574": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "576": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "577": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0",
        "\"asset_id\""
      ]
    },
    "578": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "579": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "tmp%10#0",
        "maybe_value%2#0"
      ]
    },
    "580": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "582": {
      "op": "bury 1",
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "584": {
      "error": "You must register to receive this product first. Use help_buyer_register or buy_with_registration.",
      "op": "assert // You must register to receive this product first. Use help_buyer_register or buy_with_registration.",
      "stack_out": []
    },
    "585": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "588": {
      "op": "bytec_0 // \"asset_id\"",
      "stack_out": [
        "tmp%13#0",
        "0",
        "\"asset_id\""
      ]
    },
    "589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "590": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "tmp%13#0",
        "maybe_value%3#0"
      ]
    },
    "591": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "contract_balance#0",
        "exists#0"
      ],
      "stack_out": [
        "contract_balance#0",
        "exists#0"
      ]
    },
    "593": {
      "error": "Contract is not opted into this asset",
      "op": "assert // Contract is not opted into this asset",
      "stack_out": [
        "contract_balance#0"
      ]
    },
    "594": {
      "op": "frame_dig -1",
      "stack_out": [
        "contract_balance#0",
        "amount#0 (copy)"
      ]
    },
    "596": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "597": {
      "error": "Not enough product available in stock.",
      "op": "assert // Not enough product available in stock.",
      "stack_out": []
    },
    "598": {
      "op": "itxn_begin"
    },
    "599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "600": {
      "op": "bytec_0 // \"asset_id\"",
      "stack_out": [
        "0",
        "\"asset_id\""
      ]
    },
    "601": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "602": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "603": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "605": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "607": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "609": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "611": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "613": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "614": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "616": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "617": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "619": {
      "op": "itxn_submit"
    },
    "620": {
      "retsub": true,
      "op": "retsub"
    },
    "621": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.buy_with_registration",
      "params": {
        "payment#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "buy_with_registration",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "624": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "excess#0"
      ]
    },
    "626": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "excess#0",
        "payment#0 (copy)"
      ]
    },
    "628": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "excess#0",
        "tmp%0#0"
      ]
    },
    "630": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "excess#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "632": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "excess#0",
        "tmp%2#0"
      ]
    },
    "633": {
      "error": "Sender mismatch.",
      "op": "assert // Sender mismatch.",
      "stack_out": [
        "excess#0"
      ]
    },
    "634": {
      "op": "frame_dig -2",
      "stack_out": [
        "excess#0",
        "payment#0 (copy)"
      ]
    },
    "636": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "excess#0",
        "tmp%3#0"
      ]
    },
    "638": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "excess#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "640": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "excess#0",
        "tmp%5#0"
      ]
    },
    "641": {
      "error": "Payment must go to marketplace.",
      "op": "assert // Payment must go to marketplace.",
      "stack_out": [
        "excess#0"
      ]
    },
    "642": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "excess#0",
        "0"
      ]
    },
    "643": {
      "op": "bytec_2 // \"min_order_quantity\"",
      "defined_out": [
        "\"min_order_quantity\"",
        "0"
      ],
      "stack_out": [
        "excess#0",
        "0",
        "\"min_order_quantity\""
      ]
    },
    "644": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "excess#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "645": {
      "error": "check self.min_order_quantity exists",
      "op": "assert // check self.min_order_quantity exists",
      "stack_out": [
        "excess#0",
        "maybe_value%0#0"
      ]
    },
    "646": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "excess#0",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "648": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "excess#0",
        "tmp%6#0"
      ]
    },
    "649": {
      "error": "Order below minimum quantity.",
      "op": "assert // Order below minimum quantity.",
      "stack_out": [
        "excess#0"
      ]
    },
    "650": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "0"
      ]
    },
    "651": {
      "op": "bytec_1 // \"price_per_unit\"",
      "defined_out": [
        "\"price_per_unit\"",
        "0"
      ],
      "stack_out": [
        "excess#0",
        "0",
        "\"price_per_unit\""
      ]
    },
    "652": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "excess#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "653": {
      "error": "check self.price_per_unit exists",
      "op": "assert // check self.price_per_unit exists",
      "stack_out": [
        "excess#0",
        "maybe_value%1#0"
      ]
    },
    "654": {
      "op": "frame_dig -1",
      "stack_out": [
        "excess#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "656": {
      "op": "*",
      "defined_out": [
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "657": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "required_amount#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%7#0"
      ]
    },
    "659": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%7#0",
        "0"
      ]
    },
    "660": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "required_amount#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%7#0",
        "0",
        "\"asset_id\""
      ]
    },
    "661": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "required_amount#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "662": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%7#0",
        "maybe_value%2#0"
      ]
    },
    "663": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "contract_balance#0",
        "exists#0",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "contract_balance#0",
        "exists#0"
      ]
    },
    "665": {
      "error": "Contract is not opted into this asset",
      "op": "assert // Contract is not opted into this asset",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "contract_balance#0"
      ]
    },
    "666": {
      "op": "frame_dig -1",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "contract_balance#0",
        "amount#0 (copy)"
      ]
    },
    "668": {
      "op": ">=",
      "defined_out": [
        "required_amount#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%8#0"
      ]
    },
    "669": {
      "error": "Not enough product available in stock.",
      "op": "assert // Not enough product available in stock.",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "670": {
      "op": "txn Sender",
      "defined_out": [
        "required_amount#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%9#0"
      ]
    },
    "672": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%9#0",
        "0"
      ]
    },
    "673": {
      "op": "bytec_0 // \"asset_id\"",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%9#0",
        "0",
        "\"asset_id\""
      ]
    },
    "674": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "required_amount#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "675": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "676": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "required_amount#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "678": {
      "op": "bury 1",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%11#0"
      ]
    },
    "680": {
      "op": "bnz buy_with_registration_else_body@3",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "683": {
      "op": "frame_dig 1",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "required_amount#0"
      ]
    },
    "685": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "required_amount#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "required_amount#0",
        "tmp%12#0"
      ]
    },
    "687": {
      "op": "+",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "required_amount#0"
      ]
    },
    "688": {
      "op": "dup",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "required_amount#0",
        "required_amount#0"
      ]
    },
    "689": {
      "op": "frame_bury 1",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "required_amount#0"
      ]
    },
    "691": {
      "op": "frame_dig -2",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "required_amount#0",
        "payment#0 (copy)"
      ]
    },
    "693": {
      "op": "gtxns Amount",
      "defined_out": [
        "required_amount#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "required_amount#0",
        "tmp%13#0"
      ]
    },
    "695": {
      "op": "<=",
      "defined_out": [
        "required_amount#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%14#0"
      ]
    },
    "696": {
      "error": "Insufficient payment amount. Additional funds needed for product registration.",
      "op": "assert // Insufficient payment amount. Additional funds needed for product registration.",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "697": {
      "op": "itxn_begin"
    },
    "698": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "0"
      ]
    },
    "699": {
      "op": "bytec_0 // \"asset_id\"",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "0",
        "\"asset_id\""
      ]
    },
    "700": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "701": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%4#0"
      ]
    },
    "702": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "704": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "705": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "707": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%4#0"
      ]
    },
    "709": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "711": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "axfer"
      ]
    },
    "712": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "714": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "0"
      ]
    },
    "715": {
      "op": "itxn_field Fee",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "717": {
      "op": "itxn_submit"
    },
    "718": {
      "block": "buy_with_registration_after_if_else@4",
      "stack_in": [
        "excess#0",
        "required_amount#0"
      ],
      "op": "itxn_begin"
    },
    "719": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "0"
      ]
    },
    "720": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "0",
        "\"asset_id\""
      ]
    },
    "721": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "722": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%5#0"
      ]
    },
    "723": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "725": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "727": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "729": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "maybe_value%5#0"
      ]
    },
    "731": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "733": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "axfer"
      ]
    },
    "734": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "736": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "0"
      ]
    },
    "737": {
      "op": "itxn_field Fee",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "739": {
      "op": "itxn_submit"
    },
    "740": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "payment#0 (copy)"
      ]
    },
    "742": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%17#0"
      ]
    },
    "744": {
      "op": "frame_dig 1",
      "defined_out": [
        "required_amount#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%17#0",
        "required_amount#0"
      ]
    },
    "746": {
      "op": "-",
      "defined_out": [
        "excess#0",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "excess#0"
      ]
    },
    "747": {
      "op": "dup",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "excess#0",
        "excess#0"
      ]
    },
    "748": {
      "op": "frame_bury 0",
      "defined_out": [
        "excess#0",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "excess#0"
      ]
    },
    "750": {
      "op": "bz buy_with_registration_after_if_else@8",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "753": {
      "op": "itxn_begin"
    },
    "754": {
      "op": "txn Sender",
      "defined_out": [
        "excess#0",
        "inner_txn_params%2%%param_Receiver_idx_0#0",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "inner_txn_params%2%%param_Receiver_idx_0#0"
      ]
    },
    "756": {
      "op": "frame_dig 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "inner_txn_params%2%%param_Receiver_idx_0#0",
        "excess#0"
      ]
    },
    "758": {
      "op": "itxn_field Amount",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "inner_txn_params%2%%param_Receiver_idx_0#0"
      ]
    },
    "760": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "762": {
      "op": "intc_1 // pay",
      "defined_out": [
        "excess#0",
        "pay",
        "required_amount#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "pay"
      ]
    },
    "763": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "0"
      ]
    },
    "766": {
      "op": "itxn_field Fee",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "768": {
      "op": "itxn_submit"
    },
    "769": {
      "block": "buy_with_registration_after_if_else@8",
      "stack_in": [
        "excess#0",
        "required_amount#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "770": {
      "block": "buy_with_registration_else_body@3",
      "stack_in": [
        "excess#0",
        "required_amount#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "payment#0 (copy)"
      ]
    },
    "772": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%15#0"
      ]
    },
    "774": {
      "op": "frame_dig 1",
      "defined_out": [
        "required_amount#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%15#0",
        "required_amount#0"
      ]
    },
    "776": {
      "op": ">=",
      "defined_out": [
        "required_amount#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "excess#0",
        "required_amount#0",
        "tmp%16#0"
      ]
    },
    "777": {
      "error": "Insufficient payment amount.",
      "op": "assert // Insufficient payment amount.",
      "stack_out": [
        "excess#0",
        "required_amount#0"
      ]
    },
    "778": {
      "op": "b buy_with_registration_after_if_else@4"
    },
    "781": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.restock_product",
      "params": {
        "asset_txn#0": "uint64"
      },
      "block": "restock_product",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "784": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "786": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "788": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "789": {
      "error": "Only the marketplace owner can restock.",
      "op": "assert // Only the marketplace owner can restock.",
      "stack_out": []
    },
    "790": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_txn#0 (copy)"
      ],
      "stack_out": [
        "asset_txn#0 (copy)"
      ]
    },
    "792": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "794": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "795": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"asset_id\""
      ]
    },
    "796": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "797": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "798": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "799": {
      "error": "Wrong asset being transferred.",
      "op": "assert // Wrong asset being transferred.",
      "stack_out": []
    },
    "800": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset_txn#0 (copy)"
      ]
    },
    "802": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "804": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "806": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "807": {
      "error": "Asset must be sent to marketplace.",
      "op": "assert // Asset must be sent to marketplace.",
      "stack_out": []
    },
    "808": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset_txn#0 (copy)"
      ]
    },
    "810": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "812": {
      "error": "Cannot restock with zero amount.",
      "op": "assert // Cannot restock with zero amount.",
      "stack_out": []
    },
    "813": {
      "retsub": true,
      "op": "retsub"
    },
    "814": {
      "subroutine": "smart_contracts.aspa.contract.DigitalMarketplace.close_marketplace",
      "params": {},
      "block": "close_marketplace",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "816": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "818": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "819": {
      "error": "Only the marketplace owner can close the marketplace.",
      "op": "assert // Only the marketplace owner can close the marketplace.",
      "stack_out": []
    },
    "820": {
      "op": "itxn_begin"
    },
    "821": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "822": {
      "op": "bytec_0 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_id\""
      ]
    },
    "823": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "824": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "825": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "827": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0"
      ]
    },
    "828": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "830": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "831": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "833": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "835": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "837": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "838": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "840": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "841": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "843": {
      "op": "itxn_submit"
    },
    "844": {
      "op": "itxn_begin"
    },
    "845": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "847": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "848": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "850": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "851": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "853": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "855": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "856": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "858": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "859": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "861": {
      "op": "itxn_submit"
    },
    "862": {
      "retsub": true,
      "op": "retsub"
    }
  }
}