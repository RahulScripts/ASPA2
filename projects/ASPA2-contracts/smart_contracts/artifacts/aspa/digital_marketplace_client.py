# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "asset", "name": "asset"}, {"type": "uint64", "name": "price"}, {"type": "string", "name": "seller"}, {"type": "string", "name": "product"}], "name": "create_app", "returns": {"type": "void"}, "desc": "Initialize the marketplace with an agricultural product and price per unit.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "new_price"}], "name": "update_price", "returns": {"type": "void"}, "desc": "Allows the owner to update the price of the product.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "new_min_quantity"}], "name": "update_min_quantity", "returns": {"type": "void"}, "desc": "Allows the owner to update the minimum order quantity.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "deposit"}], "name": "setup_marketplace", "returns": {"type": "void"}, "desc": "Sets up the marketplace with necessary funding and registers to receive products.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "buyer"}], "name": "help_buyer_register", "returns": {"type": "void"}, "desc": "Helps a buyer register to receive the product if they haven't already.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}, {"type": "uint64", "name": "amount"}], "name": "purchase", "returns": {"type": "void"}, "desc": "Allows users to buy the product by sending the correct payment.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}, {"type": "uint64", "name": "amount"}], "name": "buy_with_registration", "returns": {"type": "void"}, "desc": "Allows users to buy the product with automatic registration if needed.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "axfer", "name": "asset_txn"}], "name": "restock_product", "returns": {"type": "void"}, "desc": "Allows the owner to restock the product.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "close_marketplace", "returns": {"type": "void"}, "desc": "Allows the owner to close the marketplace and reclaim assets.", "events": [], "readonly": false, "recommendations": {}}], "name": "DigitalMarketplace", "state": {"keys": {"box": {}, "global": {"asset_id": {"key": "YXNzZXRfaWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "price_per_unit": {"key": "cHJpY2VfcGVyX3VuaXQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "seller_name": {"key": "c2VsbGVyX25hbWU=", "keyType": "AVMString", "valueType": "AVMString"}, "product_name": {"key": "cHJvZHVjdF9uYW1l", "keyType": "AVMString", "valueType": "AVMString"}, "min_order_quantity": {"key": "bWluX29yZGVyX3F1YW50aXR5", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 2, "ints": 3}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAEAAEE6AcmAwhhc3NldF9pZA5wcmljZV9wZXJfdW5pdBJtaW5fb3JkZXJfcXVhbnRpdHkxG0EARoIJBDdr2OIEpXgYGATsJxChBMdSvUsEswwm8QTuAuznBGUmJ/YEKbDJ/QRqANPONhoAjgkApgCWAIYAcABaAEAAJgAQAAIiQzEZgQUSRDEYRIgCoCNDMRkURDEYRDEWIwlJOBAkEkSIAmkjQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gBryNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXiAE+I0MxGRREMRhEMRYjCUk4ECMSRIgA4iNDMRkURDEYRDEWIwlJOBAjEkSIAI4jQzEZFEQxGEQ2GgEXiABwI0MxGRREMRhENhoBF4gAUiNDMRkURDEYFEQ2GgEXwDA2GgIXNhoDVwIANhoEVwIAiAACI0OKBAAoi/xnKYv9Z4ALc2VsbGVyX25hbWWL/meADHByb2R1Y3RfbmFtZYv/Z4mKAQAxADIJEkQpi/9niYoBADEAMgkSRCqL/2eJigEAMQAyCRJEMgoiKGVEcABFARREi/84BzIKEkSL/zgIMgEyEAgPRLEiKGVEMgoishKyFLIRJLIQIrIBs4mKAQCL/zgHMgoSRIv/OAhJMhAPRLEiKGVEi/84AElOAyKyErIUshEkshAisgGzMhAJSUEAELGLAbIIiwCyByOyECKyAbOJigIAi/44ADEAEkSL/jgHMgoSRCIqZUSL/w5Ei/44CCIpZUSL/wsSRDEAIihlRHAARQFEMgoiKGVEcABEi/8PRLEiKGVEMQCL/7ISshSyESSyECKyAbOJigIAgACL/jgAMQASRIv+OAcyChJEIiplRIv/DkQiKWVEi/8LMgoiKGVEcABEi/8PRDEAIihlRHAARQFAAFeLATIQCEmMAYv+OAgORLEiKGVEMQAishKyFLIRJLIQIrIBs7EiKGVEMQCL/7ISshSyESSyECKyAbOL/jgIiwEJSYwAQQAQsTEAiwCyCLIHI7IQIrIBs4mL/jgIiwEPREL/wYoBADEAMgkSRIv/OBEiKGVEEkSL/zgUMgoSRIv/OBJEiTEAMgkSRLEiKGVEMglJshUishKyFLIRJLIQJbIBs7EyCUmyCSKyCLIHI7IQJbIBs4k=", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 7, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [422], "errorMessage": "Already registered for this product."}, {"pc": [807], "errorMessage": "Asset must be sent to marketplace."}, {"pc": [812], "errorMessage": "Cannot restock with zero amount."}, {"pc": [593, 665], "errorMessage": "Contract is not opted into this asset"}, {"pc": [430], "errorMessage": "Funds must go to marketplace."}, {"pc": [573], "errorMessage": "Incorrect payment amount."}, {"pc": [483], "errorMessage": "Insufficient funds for registration."}, {"pc": [777], "errorMessage": "Insufficient payment amount."}, {"pc": [696], "errorMessage": "Insufficient payment amount. Additional funds needed for product registration."}, {"pc": [441], "errorMessage": "Insufficient setup funds."}, {"pc": [597, 669], "errorMessage": "Not enough product available in stock."}, {"pc": [135], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [147, 169, 195, 221, 243, 265, 281, 297], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [819], "errorMessage": "Only the marketplace owner can close the marketplace."}, {"pc": [789], "errorMessage": "Only the marketplace owner can restock."}, {"pc": [410], "errorMessage": "Only the marketplace owner can set up."}, {"pc": [396], "errorMessage": "Only the marketplace owner can update the minimum quantity."}, {"pc": [382], "errorMessage": "Only the marketplace owner can update the price."}, {"pc": [560, 649], "errorMessage": "Order below minimum quantity."}, {"pc": [474, 552, 641], "errorMessage": "Payment must go to marketplace."}, {"pc": [544, 633], "errorMessage": "Sender mismatch."}, {"pc": [799], "errorMessage": "Wrong asset being transferred."}, {"pc": [584], "errorMessage": "You must register to receive this product first. Use help_buyer_register or buy_with_registration."}, {"pc": [301], "errorMessage": "can only call when creating"}, {"pc": [138, 150, 172, 198, 224, 246, 268, 284], "errorMessage": "can only call when not creating"}, {"pc": [416, 446, 488, 579, 590, 602, 662, 675, 701, 722, 797, 824], "errorMessage": "check self.asset_id exists"}, {"pc": [556, 645], "errorMessage": "check self.min_order_quantity exists"}, {"pc": [568, 653], "errorMessage": "check self.price_per_unit exists"}, {"pc": [160], "errorMessage": "transaction type is axfer"}, {"pc": [182, 208, 234, 256], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdatePriceArgs:
    """Dataclass for update_price arguments"""
    new_price: int

    @property
    def abi_method_signature(self) -> str:
        return "update_price(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateMinQuantityArgs:
    """Dataclass for update_min_quantity arguments"""
    new_min_quantity: int

    @property
    def abi_method_signature(self) -> str:
        return "update_min_quantity(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetupMarketplaceArgs:
    """Dataclass for setup_marketplace arguments"""
    deposit: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "setup_marketplace(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class HelpBuyerRegisterArgs:
    """Dataclass for help_buyer_register arguments"""
    buyer: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "help_buyer_register(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PurchaseArgs:
    """Dataclass for purchase arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "purchase(pay,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyWithRegistrationArgs:
    """Dataclass for buy_with_registration arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "buy_with_registration(pay,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RestockProductArgs:
    """Dataclass for restock_product arguments"""
    asset_txn: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "restock_product(axfer)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateAppArgs:
    """Dataclass for create_app arguments"""
    asset: int
    price: int
    seller: str
    product: str

    @property
    def abi_method_signature(self) -> str:
        return "create_app(asset,uint64,string,string)void"


class _DigitalMarketplaceDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def close_marketplace(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_marketplace()void",
        }))


class DigitalMarketplaceParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_DigitalMarketplaceDelete":
        return _DigitalMarketplaceDelete(self.app_client)

    def update_price(
        self,
        args: tuple[int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_price(uint64)void",
            "args": method_args,
        }))

    def update_min_quantity(
        self,
        args: tuple[int] | UpdateMinQuantityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_min_quantity(uint64)void",
            "args": method_args,
        }))

    def setup_marketplace(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SetupMarketplaceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setup_marketplace(pay)void",
            "args": method_args,
        }))

    def help_buyer_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | HelpBuyerRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "help_buyer_register(pay)void",
            "args": method_args,
        }))

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase(pay,uint64)void",
            "args": method_args,
        }))

    def buy_with_registration(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | BuyWithRegistrationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_with_registration(pay,uint64)void",
            "args": method_args,
        }))

    def restock_product(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RestockProductArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "restock_product(axfer)void",
            "args": method_args,
        }))

    def create_app(
        self,
        args: tuple[int, int, str, str] | CreateAppArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_app(asset,uint64,string,string)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _DigitalMarketplaceDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def close_marketplace(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_marketplace()void",
        }))


class DigitalMarketplaceCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_DigitalMarketplaceDeleteTransaction":
        return _DigitalMarketplaceDeleteTransaction(self.app_client)

    def update_price(
        self,
        args: tuple[int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_price(uint64)void",
            "args": method_args,
        }))

    def update_min_quantity(
        self,
        args: tuple[int] | UpdateMinQuantityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_min_quantity(uint64)void",
            "args": method_args,
        }))

    def setup_marketplace(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SetupMarketplaceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setup_marketplace(pay)void",
            "args": method_args,
        }))

    def help_buyer_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | HelpBuyerRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "help_buyer_register(pay)void",
            "args": method_args,
        }))

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase(pay,uint64)void",
            "args": method_args,
        }))

    def buy_with_registration(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | BuyWithRegistrationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_with_registration(pay,uint64)void",
            "args": method_args,
        }))

    def restock_product(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RestockProductArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "restock_product(axfer)void",
            "args": method_args,
        }))

    def create_app(
        self,
        args: tuple[int, int, str, str] | CreateAppArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_app(asset,uint64,string,string)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _DigitalMarketplaceDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def close_marketplace(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_marketplace()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class DigitalMarketplaceSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_DigitalMarketplaceDeleteSend":
        return _DigitalMarketplaceDeleteSend(self.app_client)

    def update_price(
        self,
        args: tuple[int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_price(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def update_min_quantity(
        self,
        args: tuple[int] | UpdateMinQuantityArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_min_quantity(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def setup_marketplace(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SetupMarketplaceArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setup_marketplace(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def help_buyer_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | HelpBuyerRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "help_buyer_register(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase(pay,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def buy_with_registration(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | BuyWithRegistrationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_with_registration(pay,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def restock_product(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RestockProductArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "restock_product(axfer)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create_app(
        self,
        args: tuple[int, int, str, str] | CreateAppArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_app(asset,uint64,string,string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    asset_id: int
    price_per_unit: int
    seller_name: str
    product_name: str
    min_order_quantity: int

class DigitalMarketplaceState:
    """Methods to access state for the current DigitalMarketplace app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def asset_id(self) -> int:
        """Get the current value of the asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def price_per_unit(self) -> int:
        """Get the current value of the price_per_unit key in global_state state"""
        value = self.app_client.state.global_state.get_value("price_per_unit")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def seller_name(self) -> str:
        """Get the current value of the seller_name key in global_state state"""
        value = self.app_client.state.global_state.get_value("seller_name")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def product_name(self) -> str:
        """Get the current value of the product_name key in global_state state"""
        value = self.app_client.state.global_state.get_value("product_name")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def min_order_quantity(self) -> int:
        """Get the current value of the min_order_quantity key in global_state state"""
        value = self.app_client.state.global_state.get_value("min_order_quantity")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class DigitalMarketplaceClient:
    """Client for interacting with DigitalMarketplace smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = DigitalMarketplaceParams(self.app_client)
        self.create_transaction = DigitalMarketplaceCreateTransactionParams(self.app_client)
        self.send = DigitalMarketplaceSend(self.app_client)
        self.state = DigitalMarketplaceState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "DigitalMarketplaceClient":
        return DigitalMarketplaceClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "DigitalMarketplaceClient":
        return DigitalMarketplaceClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "DigitalMarketplaceClient":
        return DigitalMarketplaceClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "DigitalMarketplaceComposer":
        return DigitalMarketplaceComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_price(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_min_quantity(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["setup_marketplace(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["help_buyer_register(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["purchase(pay,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buy_with_registration(pay,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["restock_product(axfer)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_app(asset,uint64,string,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close_marketplace()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class DigitalMarketplaceMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateAppArgs,
        str | None,
    ]
):
    """Parameters for creating DigitalMarketplace contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class DigitalMarketplaceMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling DigitalMarketplace contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class DigitalMarketplaceFactory(algokit_utils.TypedAppFactoryProtocol[DigitalMarketplaceMethodCallCreateParams, None, DigitalMarketplaceMethodCallDeleteParams]):
    """Factory for deploying and managing DigitalMarketplaceClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = DigitalMarketplaceFactoryParams(self.app_factory)
        self.create_transaction = DigitalMarketplaceFactoryCreateTransaction(self.app_factory)
        self.send = DigitalMarketplaceFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: DigitalMarketplaceMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: DigitalMarketplaceMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[DigitalMarketplaceClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return DigitalMarketplaceClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> DigitalMarketplaceClient:
        """Get an app client by creator address and name"""
        return DigitalMarketplaceClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> DigitalMarketplaceClient:
        """Get an app client by app ID"""
        return DigitalMarketplaceClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class DigitalMarketplaceFactoryParams:
    """Parameters for creating transactions for DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = DigitalMarketplaceFactoryCreateParams(app_factory)
        self.update = DigitalMarketplaceFactoryUpdateParams(app_factory)
        self.delete = DigitalMarketplaceFactoryDeleteParams(app_factory)

class DigitalMarketplaceFactoryCreateParams:
    """Parameters for 'create' operations of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def update_price(
        self,
        args: tuple[int] | UpdatePriceArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_price(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_price(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_min_quantity(
        self,
        args: tuple[int] | UpdateMinQuantityArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_min_quantity(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_min_quantity(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def setup_marketplace(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SetupMarketplaceArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the setup_marketplace(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "setup_marketplace(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def help_buyer_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | HelpBuyerRegisterArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the help_buyer_register(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "help_buyer_register(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the purchase(pay,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "purchase(pay,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def buy_with_registration(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | BuyWithRegistrationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buy_with_registration(pay,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buy_with_registration(pay,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def restock_product(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RestockProductArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the restock_product(axfer)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "restock_product(axfer)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_app(
        self,
        args: tuple[int, int, str, str] | CreateAppArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_app(asset,uint64,string,string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_app(asset,uint64,string,string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def close_marketplace(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the close_marketplace()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "close_marketplace()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class DigitalMarketplaceFactoryUpdateParams:
    """Parameters for 'update' operations of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class DigitalMarketplaceFactoryDeleteParams:
    """Parameters for 'delete' operations of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class DigitalMarketplaceFactoryCreateTransaction:
    """Create transactions for DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = DigitalMarketplaceFactoryCreateTransactionCreate(app_factory)


class DigitalMarketplaceFactoryCreateTransactionCreate:
    """Create new instances of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class DigitalMarketplaceFactorySend:
    """Send calls to DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = DigitalMarketplaceFactorySendCreate(app_factory)


class DigitalMarketplaceFactorySendCreate:
    """Send create calls to DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[DigitalMarketplaceClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return DigitalMarketplaceClient(result[0]), result[1]

    def create_app(
        self,
        args: tuple[int, int, str, str] | CreateAppArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[DigitalMarketplaceClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create_app(asset,uint64,string,string)void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create_app(asset,uint64,string,string)void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return DigitalMarketplaceClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _DigitalMarketplaceDeleteComposer:
    def __init__(self, composer: "DigitalMarketplaceComposer"):
        self.composer = composer
    def close_marketplace(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.close_marketplace(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "close_marketplace()void", v
            )
        )
        return self.composer


class DigitalMarketplaceComposer:
    """Composer for creating transaction groups for DigitalMarketplace contract calls"""

    def __init__(self, client: "DigitalMarketplaceClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def delete(self) -> "_DigitalMarketplaceDeleteComposer":
        return _DigitalMarketplaceDeleteComposer(self)

    def update_price(
        self,
        args: tuple[int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_price(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_price(uint64)void", v
            )
        )
        return self

    def update_min_quantity(
        self,
        args: tuple[int] | UpdateMinQuantityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_min_quantity(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_min_quantity(uint64)void", v
            )
        )
        return self

    def setup_marketplace(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SetupMarketplaceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.setup_marketplace(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "setup_marketplace(pay)void", v
            )
        )
        return self

    def help_buyer_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | HelpBuyerRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.help_buyer_register(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "help_buyer_register(pay)void", v
            )
        )
        return self

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.purchase(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "purchase(pay,uint64)void", v
            )
        )
        return self

    def buy_with_registration(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | BuyWithRegistrationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buy_with_registration(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buy_with_registration(pay,uint64)void", v
            )
        )
        return self

    def restock_product(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RestockProductArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.restock_product(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "restock_product(axfer)void", v
            )
        )
        return self

    def create_app(
        self,
        args: tuple[int, int, str, str] | CreateAppArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_app(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_app(asset,uint64,string,string)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "DigitalMarketplaceComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
